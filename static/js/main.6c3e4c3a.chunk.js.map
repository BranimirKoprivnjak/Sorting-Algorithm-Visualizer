{"version":3,"sources":["components/Chart/Chart.module.css","hooks/hooks.ts","config/config.js","components/Chart/Legend.tsx","components/Chart/Chart.tsx","animations/helpers.ts","animations/bubbleSortAnimation.ts","algorithms/bubbleSort.ts","algorithms/heapSort.ts","animations/heapSortAnimation.ts","algorithms/mergeSort.ts","animations/mergeSortAnimation.ts","algorithms/quickSort.ts","animations/quickSortAnimation.ts","store/redux.ts","components/ToolBar/ToolBar.tsx","App.tsx","index.tsx","components/Chart/Legend.module.css","components/ToolBar/ToolBar.module.css"],"names":["module","exports","useCustomSelector","useSelector","PRIMARY_COLOR","SECONDARY_COLOR","TERTIARY_COLOR","QUATERNARY_COLOR","QUINARY_COLOR","Legend","algorithm","array","className","classes","legend","style","visibility","section","container","color","backgroundColor","Chart","state","barWidth","Math","floor","length","chart","map","value","index","bar","height","width","resetColor","timer","bars","animationSpeed","i","setTimeout","comparison","barOneStyle","barTwoStyle","beetweenAnimations","animationType","isMerge","bubbleSortAnimation","animations","n","lastSwap","push","type","temp","bubbleSortOpt","console","log","document","getElementsByClassName","valueOne","valueTwo","indexOne","heightOne","indexTwo","heightTwo","barOne","barTwo","prevIndex","innerHTML","maxHeapify","largest","left","right","heapSortAnimation","heapSort","comparedElementIndex","sortedIndex","mergeSort","startIndex","endIndex","auxArray","middleIndex","merge","k","j","mergeSortAnimation","slice","mergeSortAnimations","isLastMerge","barStyle","parseInt","quickSort","partition","middle","pivot","quickSortAnimation","quickSortAnimations","pivotIndex","pivotValue","isPivot","abs","initialState","arraySize","stateSlice","createSlice","name","reducers","action","payload","arrayChange","arraySizeChange","animationSpeedChange","store","configureStore","reducer","stateActions","actions","ToolBar","dispatch","useDispatch","statePara","refToolbar","useRef","arrayCopy","generateArrayHandler","useCallback","generatedArray","random","animationHelper","sortAnimation","current","display","sortedArray","useEffect","toolbar","ref","onClick","slider","htmlFor","id","min","max","onChange","event","target","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6c3e4c3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"Chart_chart__3ljTe\",\"bar\":\"Chart_bar__1o6z0\"};","import { useDispatch, TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { Dispatch, RootState } from '../models/model';\r\n\r\n// https://redux.js.org/usage/usage-with-typescript\r\nexport const useCustomDispatch = () => useDispatch<Dispatch>();\r\nexport const useCustomSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","export const DEFAULT_ARRAY_SIZE = 50;\r\nexport const DEFAULT_ANIMATION_SPEED = 500; //ms\r\nexport const PRIMARY_COLOR = '#008060'; // green\r\nexport const SECONDARY_COLOR = '#0944c0'; // blue\r\nexport const TERTIARY_COLOR = '#db3939'; // red\r\nexport const QUATERNARY_COLOR = '#fff454'; // yellow\r\nexport const QUINARY_COLOR = '#800080'; // purple\r\n","import classes from './Legend.module.css';\r\nimport {\r\n  SECONDARY_COLOR,\r\n  TERTIARY_COLOR,\r\n  QUATERNARY_COLOR,\r\n  QUINARY_COLOR,\r\n} from '../../config/config';\r\n\r\nconst Legend: React.FC<{ algorithm: string; array: number[] }> = ({\r\n  algorithm,\r\n  array,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={classes.legend}\r\n      style={{ visibility: algorithm ? 'visible' : 'hidden' }}\r\n    >\r\n      <div>\r\n        <h2>{algorithm}</h2>\r\n      </div>\r\n      <div className={classes.section}>\r\n        <div className={classes.container}>\r\n          <div\r\n            className={classes.color}\r\n            style={{ backgroundColor: `${SECONDARY_COLOR}` }}\r\n          ></div>\r\n          <p>Comparison</p>\r\n        </div>\r\n        <div className={classes.container}>\r\n          <div\r\n            className={classes.color}\r\n            style={{ backgroundColor: `${TERTIARY_COLOR}` }}\r\n          ></div>\r\n          <p>{algorithm === 'Merge Sort' ? 'Change' : 'Swap'}</p>\r\n        </div>\r\n        {algorithm === 'Quick Sort' && (\r\n          <div className={classes.container}>\r\n            <div\r\n              className={classes.color}\r\n              style={{ backgroundColor: `${QUATERNARY_COLOR}` }}\r\n            ></div>\r\n            <p>Pivot</p>\r\n          </div>\r\n        )}\r\n        <div className={classes.container}>\r\n          <div\r\n            className={classes.color}\r\n            style={{ backgroundColor: `${QUINARY_COLOR}` }}\r\n          ></div>\r\n          <p>Sorted</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n","import { State } from '../../models/model';\r\nimport classes from './Chart.module.css';\r\nimport Legend from './Legend';\r\n\r\nconst Chart: React.FC<{ state: State }> = ({ state }) => {\r\n  const array = state.array;\r\n  const barWidth = Math.floor((1 / array.length) * 500);\r\n\r\n  return (\r\n    <>\r\n      <Legend algorithm={state.algorithm} array={array} />\r\n      <div className={classes.chart}>\r\n        {array.map((value: number, index: number) => (\r\n          <div\r\n            key={index}\r\n            className={classes.bar}\r\n            style={{\r\n              height: `${value * 0.7}px`,\r\n              width: `${barWidth}px`,\r\n            }}\r\n          >\r\n            {array.length <= 20 ? value : ''}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import {\r\n  PRIMARY_COLOR,\r\n  SECONDARY_COLOR,\r\n  TERTIARY_COLOR,\r\n} from '../config/config';\r\n\r\nexport const resetColor = (\r\n  timer: number,\r\n  array: number[],\r\n  bars: HTMLCollectionOf<Element>,\r\n  animationSpeed: number\r\n) => {\r\n  timer++;\r\n  for (let i = 0; i < array.length; i++) {\r\n    setTimeout(() => {\r\n      const bar = bars[i] as HTMLElement;\r\n      bar.style.backgroundColor = PRIMARY_COLOR;\r\n    }, timer * animationSpeed);\r\n  }\r\n  return timer;\r\n};\r\n\r\nexport const comparison = (\r\n  timer: number,\r\n  barOneStyle: CSSStyleDeclaration,\r\n  barTwoStyle: CSSStyleDeclaration,\r\n  animationSpeed: number\r\n) => {\r\n  setTimeout(() => {\r\n    barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n    barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n  }, timer * animationSpeed);\r\n  timer++;\r\n  return timer;\r\n};\r\n\r\nexport const beetweenAnimations = (\r\n  timer: number,\r\n  barOneStyle: CSSStyleDeclaration,\r\n  barTwoStyle: CSSStyleDeclaration,\r\n  animationSpeed: number,\r\n  animationType: string,\r\n  isMerge: boolean\r\n) => {\r\n  if (!isMerge)\r\n    setTimeout(() => {\r\n      barOneStyle.backgroundColor =\r\n        animationType === 'swap' ? TERTIARY_COLOR : PRIMARY_COLOR;\r\n      barTwoStyle.backgroundColor =\r\n        animationType === 'swap' ? TERTIARY_COLOR : PRIMARY_COLOR;\r\n    }, timer * animationSpeed);\r\n  if (isMerge)\r\n    setTimeout(() => {\r\n      barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n      barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n    }, timer * animationSpeed);\r\n};\r\n","import { PRIMARY_COLOR, QUINARY_COLOR } from '../config/config';\r\nimport { bubbleSortOpt } from '../algorithms/bubbleSort';\r\nimport { Animation } from '../models/model';\r\n\r\nimport { resetColor, comparison, beetweenAnimations } from './helpers';\r\n\r\nexport const bubbleSortAnimation = (\r\n  array: number[],\r\n  animationSpeed: number\r\n) => {\r\n  const animations: Animation[] = bubbleSortOpt(array);\r\n  console.log(animations);\r\n  const bars = document.getElementsByClassName('Chart_bar__1o6z0');\r\n  let timer = 0;\r\n  for (let i = 0; i < animations.length; i++) {\r\n    const animationType = animations[i].type;\r\n    if (animationType !== 'flag') {\r\n      const [valueOne, valueTwo] = animations[i].value;\r\n      const [indexOne, heightOne] = valueOne;\r\n      const [indexTwo, heightTwo] = valueTwo;\r\n      const barOne = bars[indexOne] as HTMLElement;\r\n      const barTwo = bars[indexTwo] as HTMLElement;\r\n      const barOneStyle = barOne.style;\r\n      const barTwoStyle = barTwo.style;\r\n\r\n      const prevIndex = i - 1;\r\n      if (i !== 0 && animations[prevIndex].type === 'flag') timer++;\r\n\r\n      if (i !== 0 && animations[prevIndex].type === 'swap') timer++;\r\n\r\n      if (animationType === 'comparison')\r\n        timer = comparison(timer, barOneStyle, barTwoStyle, animationSpeed);\r\n\r\n      beetweenAnimations(\r\n        timer,\r\n        barOneStyle,\r\n        barTwoStyle,\r\n        animationSpeed,\r\n        animationType,\r\n        false\r\n      );\r\n\r\n      if (animationType === 'swap') {\r\n        timer++;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${heightOne * 0.7}px`;\r\n          barTwoStyle.height = `${heightTwo * 0.7}px`;\r\n          barOne.innerHTML = array.length <= 20 ? `${heightOne}` : '';\r\n          barTwo.innerHTML = array.length <= 20 ? `${heightTwo}` : '';\r\n        }, timer * animationSpeed);\r\n        timer++;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, timer * animationSpeed);\r\n      }\r\n    } else {\r\n      // mark everything after flag as sorted\r\n      const [valueOne] = animations[i].value;\r\n      const [flag] = valueOne;\r\n      for (let i = flag; i < array.length; i++) {\r\n        if (i === 1) {\r\n          setTimeout(() => {\r\n            const bar = bars[0] as HTMLElement;\r\n            bar.style.backgroundColor = QUINARY_COLOR;\r\n          }, timer * animationSpeed);\r\n        }\r\n        const bar = bars[i] as HTMLElement;\r\n        setTimeout(() => {\r\n          bar.style.backgroundColor = QUINARY_COLOR;\r\n        }, timer * animationSpeed);\r\n      }\r\n    }\r\n  }\r\n  // after sorting, reset color back to green\r\n  timer = resetColor(timer, array, bars, animationSpeed);\r\n  return [array, timer];\r\n};\r\n","import { Animation } from '../models/model';\r\n\r\nexport const bubbleSortUnopt = (array: number[]) => {\r\n  const animations: Animation[] = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array.length; j++) {\r\n      // O(nˇˇn) but last iteration is useless coz index is out of range\r\n      if (array[j] > array[j + 1]) {\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n};\r\n\r\nexport const bubbleSortOpt = (array: number[]) => {\r\n  const animations = [];\r\n  let n = array.length;\r\n  while (n > 1) {\r\n    // keeping track of last position on which swap occured\r\n    let lastSwap = 0;\r\n    for (let i = 1; i < n; i++) {\r\n      // comparison\r\n      animations.push({ type: 'comparison', value: [[i - 1], [i]] });\r\n      if (array[i] < array[i - 1]) {\r\n        let temp = array[i - 1];\r\n        array[i - 1] = array[i];\r\n        array[i] = temp;\r\n        lastSwap = i;\r\n        // swap\r\n        animations.push({\r\n          type: 'swap',\r\n          value: [\r\n            [i - 1, array[i - 1]],\r\n            [i, temp],\r\n          ],\r\n        });\r\n      }\r\n    }\r\n    n = lastSwap;\r\n    // everything after and including n is sorted\r\n    animations.push({ type: 'flag', value: [[n]] });\r\n  }\r\n  return animations;\r\n};\r\n","import { Animation } from '../models/model';\r\n\r\nexport const heapSort = (array: number[]) => {\r\n  const n = array.length;\r\n  const animations: Animation[] = [];\r\n  for (let i = Math.floor(n / 2 - 1); i >= 0; i--) {\r\n    maxHeapify(array, n, i, animations);\r\n  }\r\n  for (let i = n - 1; i > 0; i--) {\r\n    let temp = array[0];\r\n    array[0] = array[i];\r\n    array[i] = temp;\r\n    animations.push({\r\n      type: 'swap',\r\n      value: [\r\n        [0, array[0]],\r\n        [i, temp],\r\n      ],\r\n    });\r\n    animations.push({ type: 'sorted', value: [[i]] });\r\n    maxHeapify(array, i, 0, animations);\r\n  }\r\n  return animations;\r\n};\r\n\r\nconst maxHeapify = (\r\n  array: number[],\r\n  n: number,\r\n  i: number,\r\n  animations: Animation[]\r\n) => {\r\n  let largest = i;\r\n  const left = 2 * i + 1;\r\n  const right = 2 * i + 2;\r\n  if (left < n && array[left] > array[largest]) {\r\n    animations.push({ type: 'comparison', value: [[left], [largest]] });\r\n    largest = left;\r\n  }\r\n  if (right < n && array[right] > array[largest]) {\r\n    animations.push({ type: 'comparison', value: [[right], [largest]] });\r\n    largest = right;\r\n  }\r\n  if (largest !== i) {\r\n    let temp = array[i];\r\n    array[i] = array[largest];\r\n    array[largest] = temp;\r\n    // comparison\r\n    // animations.push({ type: 'comparison', value: [[largest], [i]] });\r\n    // swap\r\n    animations.push({\r\n      type: 'swap',\r\n      value: [\r\n        [largest, temp],\r\n        [i, array[i]],\r\n      ],\r\n    });\r\n    maxHeapify(array, n, largest, animations);\r\n  }\r\n};\r\n","import { PRIMARY_COLOR, QUINARY_COLOR } from '../config/config';\r\nimport { heapSort } from '../algorithms/heapSort';\r\nimport { Animation } from '../models/model';\r\n\r\nimport { resetColor, comparison, beetweenAnimations } from './helpers';\r\n\r\nexport const heapSortAnimation = (array: number[], animationSpeed: number) => {\r\n  const animations: Animation[] = heapSort(array);\r\n  const bars = document.getElementsByClassName('Chart_bar__1o6z0');\r\n  let timer = 0,\r\n    comparedElementIndex = 0;\r\n  for (let i = 0; i < animations.length; i++) {\r\n    if (animations[i].type !== 'sorted') {\r\n      const [valueOne, valueTwo] = animations[i].value;\r\n      const [indexOne, heightOne] = valueOne;\r\n      const [indexTwo, heightTwo] = valueTwo;\r\n      const animationType = animations[i].type;\r\n      const barOne = bars[indexOne] as HTMLElement;\r\n      const barTwo = bars[indexTwo] as HTMLElement;\r\n      const barOneStyle = barOne.style;\r\n      const barTwoStyle = barTwo.style;\r\n\r\n      const prevIndex = i - 1;\r\n      if (i !== 0 && animations[prevIndex].type === 'sorted') timer++;\r\n\r\n      if (i !== 0 && animations[prevIndex].type === 'swap') timer++;\r\n\r\n      if (comparedElementIndex !== indexOne) {\r\n        comparedElementIndex = indexOne;\r\n        timer = comparison(timer, barOneStyle, barTwoStyle, animationSpeed);\r\n      }\r\n\r\n      beetweenAnimations(\r\n        timer,\r\n        barOneStyle,\r\n        barTwoStyle,\r\n        animationSpeed,\r\n        animationType,\r\n        false\r\n      );\r\n\r\n      if (animationType === 'swap') {\r\n        timer++;\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${heightOne * 0.7}px`;\r\n          barTwoStyle.height = `${heightTwo * 0.7}px`;\r\n          barOne.innerHTML = array.length <= 20 ? `${heightOne}` : '';\r\n          barTwo.innerHTML = array.length <= 20 ? `${heightTwo}` : '';\r\n        }, timer * animationSpeed);\r\n        timer++;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, timer * animationSpeed);\r\n      }\r\n    } else {\r\n      // mark removed item from max-heap as sorted\r\n      const [valueOne] = animations[i].value;\r\n      const [sortedIndex] = valueOne;\r\n      setTimeout(() => {\r\n        const bar = bars[sortedIndex] as HTMLElement;\r\n        bar.style.backgroundColor = QUINARY_COLOR;\r\n      }, timer * animationSpeed);\r\n    }\r\n  }\r\n  // at the end, color 1st element as sorted\r\n  setTimeout(() => {\r\n    const bar = bars[0] as HTMLElement;\r\n    bar.style.backgroundColor = QUINARY_COLOR;\r\n  }, timer * animationSpeed);\r\n\r\n  // after sorting, reset color back to green\r\n  timer = resetColor(timer, array, bars, animationSpeed);\r\n  return [array, timer];\r\n};\r\n","import { Animation } from '../models/model';\r\n\r\nexport const mergeSortAnimations = (array: number[]) => {\r\n  const animations: Animation[] = [];\r\n  if (array.length <= 1) return animations;\r\n  const auxArray = array.slice();\r\n  mergeSort(array, 0, array.length - 1, auxArray, animations);\r\n  return animations;\r\n};\r\n\r\nconst mergeSort = (\r\n  array: number[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  auxArray: number[],\r\n  animations: Animation[]\r\n) => {\r\n  if (startIndex === endIndex) return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSort(auxArray, startIndex, middleIndex, array, animations);\r\n  mergeSort(auxArray, middleIndex + 1, endIndex, array, animations);\r\n  merge(array, startIndex, middleIndex, endIndex, auxArray, animations);\r\n};\r\n\r\nconst merge = (\r\n  array: number[],\r\n  startIndex: number,\r\n  middleIndex: number,\r\n  endIndex: number,\r\n  auxArray: number[],\r\n  animations: Animation[]\r\n) => {\r\n  let k = startIndex,\r\n    i = startIndex,\r\n    j = middleIndex + 1;\r\n  if (\r\n    i === 0 &&\r\n    (j === Math.floor(array.length / 2) ||\r\n      j === Math.floor(array.length / 2) + 1)\r\n  )\r\n    animations.push({ type: 'flag', value: [[i], [j]] });\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    animations.push({ type: 'comparison', value: [[i], [j]] });\r\n    if (auxArray[i] <= auxArray[j]) {\r\n      animations.push({ type: 'swap', value: [[k], [auxArray[i]]] });\r\n      array[k++] = auxArray[i++];\r\n    } else {\r\n      animations.push({ type: 'swap', value: [[k], [auxArray[j]]] });\r\n      array[k++] = auxArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    animations.push({ type: 'comparison', value: [[k], [k]] });\r\n    animations.push({ type: 'swap', value: [[k], [auxArray[i]]] });\r\n    array[k++] = auxArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    animations.push({ type: 'comparison', value: [[k], [k]] });\r\n    animations.push({ type: 'swap', value: [[k], [auxArray[j]]] });\r\n    array[k++] = auxArray[j++];\r\n  }\r\n};\r\n","import { PRIMARY_COLOR, TERTIARY_COLOR, QUINARY_COLOR } from '../config/config';\r\nimport { mergeSortAnimations } from '../algorithms/mergeSort';\r\nimport { Animation } from '../models/model';\r\n\r\nimport { resetColor, comparison, beetweenAnimations } from './helpers';\r\n\r\nexport const mergeSortAnimation = (array: number[], animationSpeed: number) => {\r\n  const animations: Animation[] = mergeSortAnimations(array);\r\n  const bars = document.getElementsByClassName('Chart_bar__1o6z0');\r\n  let timer = 0;\r\n  let isLastMerge = false;\r\n  for (let i = 0; i < animations.length; i++) {\r\n    const animationType = animations[i].type;\r\n\r\n    const prevIndex = i - 1;\r\n    if (i !== 0 && animations[prevIndex].type === 'swap') timer++;\r\n\r\n    if (animationType === 'flag') isLastMerge = true;\r\n    if (animationType === 'comparison') {\r\n      const [valueOne, valueTwo] = animations[i].value;\r\n      const [indexOne] = valueOne;\r\n      const [indexTwo] = valueTwo;\r\n      const barOne = bars[indexOne] as HTMLElement;\r\n      const barTwo = bars[indexTwo] as HTMLElement;\r\n      const barOneStyle = barOne.style;\r\n      const barTwoStyle = barTwo.style;\r\n\r\n      timer = comparison(timer, barOneStyle, barTwoStyle, animationSpeed);\r\n\r\n      beetweenAnimations(\r\n        timer,\r\n        barOneStyle,\r\n        barTwoStyle,\r\n        animationSpeed,\r\n        animationType,\r\n        true\r\n      );\r\n    }\r\n    if (animationType === 'swap') {\r\n      const [valueOne, valueTwo] = animations[i].value;\r\n      const [index] = valueOne;\r\n      const [height] = valueTwo;\r\n      const bar = bars[index] as HTMLElement;\r\n      const barStyle = bar.style;\r\n      setTimeout(() => {\r\n        barStyle.backgroundColor = TERTIARY_COLOR;\r\n      }, timer * animationSpeed);\r\n\r\n      if (parseInt(barStyle.height) !== Math.floor(height * 0.7)) timer++;\r\n\r\n      setTimeout(() => {\r\n        barStyle.height = `${height * 0.7}px`;\r\n        bar.innerHTML = array.length <= 20 ? `${height}` : '';\r\n      }, timer * animationSpeed);\r\n      timer++;\r\n\r\n      setTimeout(() => {\r\n        barStyle.backgroundColor = PRIMARY_COLOR;\r\n      }, timer * animationSpeed);\r\n    }\r\n    // if its last recursion call aka last merge, mark elements as sorted\r\n    if (isLastMerge) {\r\n      const [valueOne] = animations[i].value;\r\n      const [index] = valueOne;\r\n      const bar = bars[index] as HTMLElement;\r\n      const barStyle = bar.style;\r\n      setTimeout(() => {\r\n        barStyle.backgroundColor = QUINARY_COLOR;\r\n      }, timer * animationSpeed);\r\n      timer++;\r\n    }\r\n  }\r\n  // after sorting, reset color back to green\r\n  timer = resetColor(timer, array, bars, animationSpeed);\r\n  return [array, timer];\r\n};\r\n","import { Animation } from '../models/model';\r\n\r\nexport const quickSortAnimations = (array: number[]) => {\r\n  const animations: Animation[] = [];\r\n  if (array.length <= 1) return animations;\r\n  quickSort(array, 0, array.length - 1, animations);\r\n  return animations;\r\n};\r\n\r\nconst quickSort = (\r\n  array: number[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  animations: Animation[]\r\n) => {\r\n  let index,\r\n    i = startIndex,\r\n    j = endIndex;\r\n  index = partition(array, i, j, animations);\r\n  if (i < index - 1) quickSort(array, i, index - 1, animations);\r\n  if (index < j) quickSort(array, index, j, animations);\r\n  return array;\r\n};\r\n\r\nconst partition = (\r\n  array: number[],\r\n  startIndex: number,\r\n  endIndex: number,\r\n  animations: Animation[]\r\n) => {\r\n  const middle = Math.floor((startIndex + endIndex) / 2);\r\n  const pivot = array[middle];\r\n  animations.push({ type: 'pivot', value: [[middle], [pivot]] });\r\n  let i = startIndex,\r\n    j = endIndex;\r\n  while (i <= j) {\r\n    while (array[i] < pivot) {\r\n      // comparison\r\n      animations.push({\r\n        type: 'comparison',\r\n        value: [[i], [j]],\r\n      });\r\n      i++;\r\n    }\r\n    while (array[j] > pivot) {\r\n      // comparison\r\n      animations.push({\r\n        type: 'comparison',\r\n        value: [[i], [j]],\r\n      });\r\n      j--;\r\n    }\r\n    // if we want to skip swap of the same element\r\n    if (i === j) {\r\n      animations.push({ type: 'comparison', value: [[i], [j]] });\r\n      i++;\r\n      j--;\r\n    }\r\n    if (i < j) {\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n      // comparison\r\n      animations.push({ type: 'comparison', value: [[i], [j]] });\r\n      // swap\r\n      animations.push({\r\n        type: 'swap',\r\n        value: [\r\n          [i, array[i]],\r\n          [j, temp],\r\n        ],\r\n      });\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n};\r\n","import {\r\n  PRIMARY_COLOR,\r\n  QUATERNARY_COLOR,\r\n  QUINARY_COLOR,\r\n} from '../config/config';\r\nimport { quickSortAnimations } from '../algorithms/quickSort';\r\nimport { Animation } from '../models/model';\r\n\r\nimport { resetColor, comparison, beetweenAnimations } from './helpers';\r\n\r\nexport const quickSortAnimation = (array: number[], animationSpeed: number) => {\r\n  const animations: Animation[] = quickSortAnimations(array);\r\n  const bars = document.getElementsByClassName('Chart_bar__1o6z0');\r\n  let timer = 0;\r\n  const pivot = { index: 0, height: 0 };\r\n  for (let i = 0; i < animations.length; i++) {\r\n    const [valueOne, valueTwo] = animations[i].value;\r\n    const [indexOne, heightOne] = valueOne;\r\n    const [indexTwo, heightTwo] = valueTwo;\r\n    const animationType = animations[i].type;\r\n    if (animationType === 'pivot') {\r\n      setTimeout(() => {\r\n        // reset old pivot\r\n        if (pivot.height !== 0) {\r\n          const bar = bars[pivot.index] as HTMLElement;\r\n          bar.style.backgroundColor =\r\n            array.length >= 50 ? QUINARY_COLOR : PRIMARY_COLOR;\r\n        }\r\n        // assign new pivot\r\n        const [pivotIndex, pivotValue] = animations[i].value;\r\n        [pivot.index] = pivotIndex;\r\n        [pivot.height] = pivotValue;\r\n        const pivotBar = bars[pivot.index] as HTMLElement;\r\n        pivotBar.style.backgroundColor = QUATERNARY_COLOR;\r\n      }, timer * animationSpeed);\r\n    } else {\r\n      const barOne = bars[indexOne] as HTMLElement;\r\n      const barTwo = bars[indexTwo] as HTMLElement;\r\n      const barOneStyle = barOne.style;\r\n      const barTwoStyle = barTwo.style;\r\n\r\n      if (animationType === 'comparison') {\r\n        timer = comparison(timer, barOneStyle, barTwoStyle, animationSpeed);\r\n      }\r\n\r\n      beetweenAnimations(\r\n        timer,\r\n        barOneStyle,\r\n        barTwoStyle,\r\n        animationSpeed,\r\n        animationType,\r\n        false\r\n      );\r\n\r\n      if (animationType === 'swap') {\r\n        timer++;\r\n        // add timer if color is red, aka its swap\r\n        setTimeout(() => {\r\n          barOneStyle.height = `${heightOne * 0.7}px`;\r\n          barTwoStyle.height = `${heightTwo * 0.7}px`;\r\n          barOne.innerHTML = array.length <= 20 ? `${heightOne}` : '';\r\n          barTwo.innerHTML = array.length <= 20 ? `${heightTwo}` : '';\r\n        }, timer * animationSpeed);\r\n        timer++;\r\n        setTimeout(() => {\r\n          // if we are comparing same values, any can become pivot\r\n          let isPivot = false;\r\n          if (heightOne === pivot.height) {\r\n            // delete old pivot\r\n            const bar = bars[pivot.index] as HTMLElement;\r\n            bar.style.backgroundColor = PRIMARY_COLOR;\r\n            // set new pivot\r\n            isPivot = true;\r\n            barOneStyle.backgroundColor = QUATERNARY_COLOR;\r\n            pivot.index = indexOne;\r\n          } else {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n          if (heightTwo === pivot.height && !isPivot) {\r\n            // delete old pivot\r\n            const bar = bars[pivot.index] as HTMLElement;\r\n            bar.style.backgroundColor = PRIMARY_COLOR;\r\n\r\n            // set new pivot\r\n            barTwoStyle.backgroundColor = QUATERNARY_COLOR;\r\n            pivot.index = indexTwo;\r\n          } else {\r\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n        }, timer * animationSpeed);\r\n        timer++;\r\n      }\r\n      // if last animation triggers pivot coloring\r\n      if (i === animations.length - 1) {\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, timer * animationSpeed);\r\n        timer++;\r\n      }\r\n      if (array.length >= 50) {\r\n        if (array[indexOne] === heightOne) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = QUINARY_COLOR;\r\n          }, timer * animationSpeed);\r\n          timer++;\r\n        }\r\n        if (array[indexTwo] === heightTwo) {\r\n          setTimeout(() => {\r\n            barTwoStyle.backgroundColor = QUINARY_COLOR;\r\n          }, timer * animationSpeed);\r\n          timer++;\r\n        }\r\n        if (indexOne === indexTwo || Math.abs(indexOne - indexTwo) === 1) {\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = QUINARY_COLOR;\r\n            barTwoStyle.backgroundColor = QUINARY_COLOR;\r\n          }, timer * animationSpeed);\r\n          timer++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // after sorting, reset color back to green\r\n  if (array.length >= 50)\r\n    timer = resetColor(timer, array, bars, animationSpeed);\r\n  return [array, timer];\r\n};\r\n","import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { DEFAULT_ARRAY_SIZE, DEFAULT_ANIMATION_SPEED } from '../config/config';\r\nimport { State } from '../models/model';\r\n\r\nconst initialState: State = {\r\n  algorithm: '',\r\n  array: [],\r\n  arraySize: DEFAULT_ARRAY_SIZE,\r\n  animationSpeed: DEFAULT_ANIMATION_SPEED,\r\n};\r\n\r\nconst stateSlice = createSlice({\r\n  name: 'state',\r\n  initialState: initialState,\r\n  reducers: {\r\n    algorithm(state: State, action: PayloadAction<string>) {\r\n      state.algorithm = action.payload;\r\n    },\r\n    arrayChange(state: State, action: PayloadAction<number[]>) {\r\n      state.array = action.payload;\r\n    },\r\n    arraySizeChange(state: State, action: PayloadAction<number>) {\r\n      state.arraySize = action.payload;\r\n    },\r\n    animationSpeedChange(state: State, action: PayloadAction<number>) {\r\n      state.animationSpeed = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: { state: stateSlice.reducer },\r\n});\r\n\r\nexport const stateActions = stateSlice.actions;\r\n\r\nexport default store;\r\n","import { ChangeEvent, useCallback, useEffect, useRef } from 'react';\r\nimport { bubbleSortAnimation } from '../../animations/bubbleSortAnimation';\r\nimport { heapSortAnimation } from '../../animations/heapSortAnimation';\r\nimport { mergeSortAnimation } from '../../animations/mergeSortAnimation';\r\nimport { quickSortAnimation } from '../../animations/quickSortAnimation';\r\nimport { useCustomSelector, useCustomDispatch } from '../../hooks/hooks';\r\nimport { stateActions } from '../../store/redux';\r\n\r\nimport classes from './ToolBar.module.css';\r\n\r\nconst ToolBar: React.FC = () => {\r\n  const dispatch = useCustomDispatch();\r\n  const state = useCustomSelector(statePara => statePara.state);\r\n  const refToolbar = useRef<HTMLDivElement>(null);\r\n  const arrayCopy = [...state.array];\r\n\r\n  const sizeChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(stateActions.arraySizeChange(+event.target!.value));\r\n  };\r\n\r\n  const speedChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(stateActions.animationSpeedChange(+event.target!.value * 10));\r\n  };\r\n\r\n  // https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\n  const generateArrayHandler = useCallback(() => {\r\n    const generatedArray: number[] = [];\r\n    for (let i = 0; i < state.arraySize; i++)\r\n      // duplicated values allowed!\r\n      generatedArray.push(Math.floor(Math.random() * (800 - 5 + 1)) + 5);\r\n    dispatch(stateActions.arrayChange(generatedArray));\r\n  }, [state.arraySize, dispatch]);\r\n\r\n  const animationHelper = (algorithm: string, sortAnimation: Function) => {\r\n    const animationSpeed = state.animationSpeed;\r\n    dispatch(stateActions.algorithm(algorithm));\r\n    refToolbar.current!.style.display = 'none';\r\n    const [sortedArray, timer] = sortAnimation(arrayCopy, animationSpeed);\r\n    setTimeout(() => {\r\n      dispatch(stateActions.arrayChange(sortedArray));\r\n      refToolbar.current!.style.display = 'flex';\r\n    }, timer * animationSpeed);\r\n  };\r\n\r\n  const mergeSortHandler = () => {\r\n    animationHelper('Merge Sort', mergeSortAnimation);\r\n  };\r\n  const bubbleSortHandler = () => {\r\n    animationHelper('Bubble Sort', bubbleSortAnimation);\r\n  };\r\n  const quickSortHandler = () => {\r\n    animationHelper('Quick Sort', quickSortAnimation);\r\n  };\r\n  const heapSortHandler = () => {\r\n    animationHelper('Heap Sort', heapSortAnimation);\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateArrayHandler();\r\n  }, [generateArrayHandler]);\r\n\r\n  return (\r\n    <div className={classes.toolbar} ref={refToolbar}>\r\n      <button onClick={generateArrayHandler}>Generate New Array</button>\r\n      <div className={classes.slider}>\r\n        <label htmlFor=\"size\">Array Size</label>\r\n        <input\r\n          id=\"size\"\r\n          type=\"range\"\r\n          min=\"5\"\r\n          max=\"100\"\r\n          onChange={sizeChangeHandler}\r\n        ></input>\r\n      </div>\r\n      <div className={classes.slider}>\r\n        <label htmlFor=\"speed\">\r\n          Animation Speed ({state.animationSpeed} ms)\r\n        </label>\r\n        <input\r\n          id=\"speed\"\r\n          type=\"range\"\r\n          min=\"1\"\r\n          max=\"50\"\r\n          onChange={speedChangeHandler}\r\n        ></input>\r\n      </div>\r\n      <button onClick={mergeSortHandler}>Merge Sort</button>\r\n      <button onClick={bubbleSortHandler}>Bubble Sort</button>\r\n      <button onClick={quickSortHandler}>Quick Sort</button>\r\n      <button onClick={heapSortHandler}>Heap Sort</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToolBar;\r\n","import { useCustomSelector } from './hooks/hooks';\n\nimport Chart from './components/Chart/Chart';\nimport ToolBar from './components/ToolBar/ToolBar';\n\nconst App: React.FC = () => {\n  const state = useCustomSelector(statePara => statePara.state);\n\n  return (\n    <>\n      <Chart state={state} />\n      <ToolBar />\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store/redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"legend\":\"Legend_legend__PxG2b\",\"section\":\"Legend_section__228wo\",\"container\":\"Legend_container__1j0_Z\",\"color\":\"Legend_color__2b400\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar\":\"ToolBar_toolbar__3H2PV\",\"slider\":\"ToolBar_slider__S2hS2\"};"],"sourceRoot":""}